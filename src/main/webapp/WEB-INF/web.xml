<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
         version="3.1">

    <display-name>Archetype Created Web Application</display-name>
    <!--welcome pages-->
    <welcome-file-list>
        <welcome-file>index.jsp</welcome-file>
    </welcome-file-list>

    <!--配置springmvc DispatcherServlet-->
    <servlet>
        <servlet-name>springMVC</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
            <!--配置dispatcher.xml作为mvc的配置文件-->
            <param-name>contextConfigLocation</param-name>
            <param-value>/WEB-INF/dispatcher-servlet.xml</param-value>
        </init-param>
        <!--配置服务启动时创建对象的优先级（值越小优先级越高）-->
        <load-on-startup>1</load-on-startup>
        <async-supported>true</async-supported>
    </servlet>
    <servlet-mapping>
        <servlet-name>springMVC</servlet-name>
        <!--/*和/都是拦截所有请求
            但是/*更加强大，还会拦截*.jsp页面
            原因：
                1）所有项目的web.xml都继承tomcat中的web.xml
                2）tomcat中的web.xml配置了两个servlet
                    a）default（org.apache.catalina.servlets.DefaultServlet）：url-pattern=/（tomcat用来处理静态资源的，如html，css等）
                    b）jsp（org.apache.jasper.servlet.JspServlet）：url-pattern=*.jsp、*.jspx（tomcat用来处理jsp）
                3）如果我们配置/，相当于覆盖了tomcat中的web
                .xml中DefaultServlet，静态资源直接交由我们配置的前端控制器来处理，前端控制器会扫描项目有没有满足该请求url的处理方法，如果没有则直接404；相反JspServlet
                不受影响，所以jsp页面正常访问
                4）如果我们配置了/*，相当于覆盖所有的请求，全部由我们自己配置的前端控制器来处理请求，所以连jsp也拦截了。
                5）配置/也是为了配合后面的restful风格
            -->
        <url-pattern>/</url-pattern>
    </servlet-mapping>
    <!--把applicationContext.xml加入到配置文件中-->
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>/WEB-INF/applicationContext.xml</param-value>
    </context-param>
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>
</web-app>