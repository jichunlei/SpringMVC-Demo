 SpringMVC框架：SpringMVC是Spring的web模块
	1、MVC架构（Model–View–Controller）
		M（Model）:模型代表一个存取数据的对象或 JAVA POJO。它也可以带有逻辑，在数据变化时更新控制器
		V（View）:视图代表模型包含的数据的可视化
		C（Controller）:控制器作用于模型和视图上。它控制数据流向模型对象，并在数据变化时更新视图。它使视图与模型分离开。
	2、SpringMVC-开发包组成
		2.1）核心容器包
			org.springframework.context-x.x.x.RELEASE.jar
			org.springframework.expression-x.x.x.RELEASE.jar
			org.springframework.core-x.x.x.RELEASE.jar
			org.springframework.beans-x.x.x.RELEASE.jar
			org.springframework.asm-x.x.x.RELEASE.jar
			commons-logging.jar
		2.2）web模块
			org.springframework.web-x.x.x.RELEASE.jar
			org.springframework.webmvc-x.x.x.RELEASE.jar
	3、Hello例子的启动流程
		1）客户端点击链接发送url到Tomcat服务器；
		2）SpringMVC的前段控制器收到所有请求，并查看@RequestMapping标注的所有方法的地址与请求地址是否有匹配到，如果匹配到则直接执行目标方法；
		3）目标方法执行完返回一个字符串，SpringMVC的视图解析器会根据前后缀及返回值拼接成一个页面地址，并转发到该页面。
	4、@RequestMapping注解：用来告诉SpringMVC这个方法是用来处理什么请求的；里面的配置参数可以省略/，即使不写，也是默认项目路径下。
		4.1）标注位置：类上或方法上
			a）标注在类上：提供初步的请求映射信息。相对于web应用的根目录
			b）标注在方法上：提供进一步的细分映射信息。相对于类定义出的url，若类未定义@RequestMapping，则相对于web应用的根目录
		4.2）内部可配置参数
			a）value：配置映射地址
				i）精确匹配
				ii）Ant匹配（url地址可以写模糊的通配符）（模糊和精确都匹配的情况下，越精确越优先）
					?：能够匹配任意一个合法字符
					*：能够匹配任意合法字符（个数可以为0,1，多个），也能匹配任意一层路径
					**：匹配多层路径（路径个数可以为0,1，多个）
					
			b）method：限定请求方式（GET, HEAD, POST, PUT, PATCH, DELETE, OPTIONS, TRACE），如果不配置则不限定请求方式
			c）params：指定request中参数值的配置格式
				i）{"param"}:指定请求参数必须有param
				ii）{"param=xxxx"}:指定请求参数必须有param，且值必须为xxxx
				iii）{"param!=xxxx"}：指定请求参数param值不能为xxxx，或者没有请求参数param
				iiii）{"!param"}：指定请求参数不能含有param
				iiiii）{"param1=xxxx1","param2","param3!=xxxx3"}：多条件匹配写法
			d）headers：规定请求头信息，用法同params
			e）consumes：直接受内容类型是哪种的请求，相当于限制请求头中的Content-Type
			f）produces：告诉浏览器返回内容类型是什么，相当于给响应头加上了Content-Type
		
	5、REST：（资源）表现层状态转化(Representational State Transfer) ，是目前最流行的一种互联网软件架构，它结构清晰，符合标准，易于理解，扩展方便
		5.1）定义
			a）资源(Resources)：网络上的一个实体，或者说是网络上的一个具体信息。它可以是一段文字、一张图片、一种服务等，总之就是一个具体的存在。可以用一个URL指向它，每种资源对应一个特定的URL。要获取这个资源，访问它的URL就可以，因此URL即为每一个资源的独一无二的识别符。
			b）表现层(Representation)：把资源具体呈现出来的形式。比如文件可以使用txt表现，也可以用HTML格式、XML格式、JSON格式，甚至可以采用二进制格式。
			c）状态转化(State Transfer)：每发出一个请求，就代表了客户端和服务器的一次交互过程。HTTP协议是一个无状态协议，即所有的状态都保存在服务器端。因此，如果客户端想要操作服务器，必须通过某种手段，让服务器端发送"状态转化"。而这种转化是建立在表现层之上的，所以就是表现层状态转化。具体来说，就是HTTP协议里面，四个表示操作方式的动词：GET、POST、PUT、DELETE。它们分别对应四种基本操作：GET用来获取资源，POST用来新建资源，PUT用来更新资源，DELETE用来删除资源。
	6、SpringMVC获取请求参数
		6.1）不使用注解获取：可以直接在方法入参定义，但是需保证参数名与请求参数的参数名一致，否则默认为null，可以定义基础类型，也可以定义对象类型，同时支持级联赋值
		6.2）@RequestParam注解
			6.2.1）属性：
				a）value：指定要获取的参数名
				b）required：指定这个参数是否是必须的，默认为true，如果没有这个参数直接抛异常。设置为false则获取不到的话不抛异常。
				c）defaultValue：设置参数的默认值，如果没有获取到参数，则取该默认值，如果不设置默认值为null（前提required=false）
		6.3）@RequestHeader注解
			获取请求头中参数用法同上
		6.4）@CookieValue注解
			获取Cookie中参数用法同上
		6.5）参数乱码问题的解决
			6.5.1）请求乱码：
				a）GET请求：改server.xml配置，在8080端口处选择参数URIEncoding=UTF-8
				b）POST请求：在第一次获取参数之前设置requset.setCharacterEncoding("UTF-8");
					（SpringMVC提供了CharacterEncodingFilter过滤器，且务必配置在其他所有filter之前）
			6.5.2）响应乱码：
				response.setContentType("text/html;charset=utf-8");
	7、SpringMVC响应参数返回到界面
		7.1）可以在方法处传入Map、Model或者ModelMap，给这些对象中保存的参数都保存在请求域中，可以被界面获取。
		7.2）方法的返回值可以是ModelAndView类型，既包含视图信息（页面地址），也包含模型数据（传递给页面的参数，包含在请求域中）
		7.3）@SessionAttributes注解
			a）value：需要放入的属性key
			b）type：需要放入的属性类类型
			c）如果两个属性都赋值，则取二者的并集
		7.4）@ModelAttribute注解：可以自己定义对象接收页面参数,而不是SpringMVC新new对象。（可以实现字段的局部更新，但是整合mybaits框架之后，该注解基本无作用，了解即可）
	8、SpringMVC的请求流程
		8.1）前端控制器（DispatcherServlet）处理步骤
			8.1.1）所有请求过来被DispatcherServlet拦截；
			8.2.2）调用doDispatch()方法进行处理；
				a）getHandler()：根据当前请求地址找到能够处理这个请求的目标处理器类（执行链）
				b）getHandlerAdapter()：根据当前处理器类获取到能够执行这个处理器方法的适配器
				c）使用刚才获取到的适配器执行目标方法
				d）目标方法执行后返回一个ModelAndView对象
				e）根据ModelAndView对象的信息转发到具体的页面，并可以在请求域中取出ModelAndView对象中的模型数据
			8.2.3）getHandler()细节
				a）handlerMappings保存了所有的handlerMapping（资源部）
				b）循环查找以上所有的handlerMapping是否包含request中的url处理器，如果有则返回组装后的HandlerExecutionChain（Handler执行链）
			8.2.4）getHandlerAdapter()细节
				a）
	