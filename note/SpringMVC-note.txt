 SpringMVC框架：SpringMVC是Spring的web模块
	1、MVC架构（Model–View–Controller）
		M（Model）:模型代表一个存取数据的对象或 JAVA POJO。它也可以带有逻辑，在数据变化时更新控制器
		V（View）:视图代表模型包含的数据的可视化
		C（Controller）:控制器作用于模型和视图上。它控制数据流向模型对象，并在数据变化时更新视图。它使视图与模型分离开。
	2、SpringMVC-开发包组成
		2.1）核心容器包
			org.springframework.context-x.x.x.RELEASE.jar
			org.springframework.expression-x.x.x.RELEASE.jar
			org.springframework.core-x.x.x.RELEASE.jar
			org.springframework.beans-x.x.x.RELEASE.jar
			org.springframework.asm-x.x.x.RELEASE.jar
			commons-logging.jar
		2.2）web模块
			org.springframework.web-x.x.x.RELEASE.jar
			org.springframework.webmvc-x.x.x.RELEASE.jar
	3、Hello例子的启动流程
		1）客户端点击链接发送url到Tomcat服务器；
		2）SpringMVC的前段控制器收到所有请求，并查看@RequestMapping标注的所有方法的地址与请求地址是否有匹配到，如果匹配到则直接执行目标方法；
		3）目标方法执行完返回一个字符串，SpringMVC的视图解析器会根据前后缀及返回值拼接成一个页面地址，并转发到该页面。
	4、@RequestMapping注解：用来告诉SpringMVC这个方法是用来处理什么请求的；里面的配置参数可以省略/，即使不写，也是默认项目路径下。
		4.1）标注位置：类上或方法上
			a）标注在类上：提供初步的请求映射信息。相对于web应用的根目录
			b）标注在方法上：提供进一步的细分映射信息。相对于类定义出的url，若类未定义@RequestMapping，则相对于web应用的根目录
		4.2）内部可配置参数
			a）value：配置映射地址
				i）精确匹配
				ii）Ant匹配（url地址可以写模糊的通配符）（模糊和精确都匹配的情况下，越精确越优先）
					?：能够匹配任意一个合法字符
					*：能够匹配任意合法字符（个数可以为0,1，多个），也能匹配任意一层路径
					**：匹配多层路径（路径个数可以为0,1，多个）
					
			b）method：限定请求方式（GET, HEAD, POST, PUT, PATCH, DELETE, OPTIONS, TRACE），如果不配置则不限定请求方式
			c）params：指定request中参数值的配置格式
				i）{"param"}:指定请求参数必须有param
				ii）{"param=xxxx"}:指定请求参数必须有param，且值必须为xxxx
				iii）{"param!=xxxx"}：指定请求参数param值不能为xxxx，或者没有请求参数param
				iiii）{"!param"}：指定请求参数不能含有param
				iiiii）{"param1=xxxx1","param2","param3!=xxxx3"}：多条件匹配写法
			d）headers：规定请求头信息，用法同params
			e）consumes：直接受内容类型是哪种的请求，相当于限制请求头中的Content-Type
			f）produces：告诉浏览器返回内容类型是什么，相当于给响应头加上了Content-Type
		
	5、REST：（资源）表现层状态转化(Representational State Transfer) ，是目前最流行的一种互联网软件架构，它结构清晰，符合标准，易于理解，扩展方便
		5.1）定义
			a）资源(Resources)：网络上的一个实体，或者说是网络上的一个具体信息。它可以是一段文字、一张图片、一种服务等，总之就是一个具体的存在。可以用一个URL指向它，每种资源对应一个特定的URL。要获取这个资源，访问它的URL就可以，因此URL即为每一个资源的独一无二的识别符。
			b）表现层(Representation)：把资源具体呈现出来的形式。比如文件可以使用txt表现，也可以用HTML格式、XML格式、JSON格式，甚至可以采用二进制格式。
			c）状态转化(State Transfer)：每发出一个请求，就代表了客户端和服务器的一次交互过程。HTTP协议是一个无状态协议，即所有的状态都保存在服务器端。因此，如果客户端想要操作服务器，必须通过某种手段，让服务器端发送"状态转化"。而这种转化是建立在表现层之上的，所以就是表现层状态转化。具体来说，就是HTTP协议里面，四个表示操作方式的动词：GET、POST、PUT、DELETE。它们分别对应四种基本操作：GET用来获取资源，POST用来新建资源，PUT用来更新资源，DELETE用来删除资源。
	6、SpringMVC获取请求参数
		6.1）不使用注解获取：可以直接在方法入参定义，但是需保证参数名与请求参数的参数名一致，否则默认为null，可以定义基础类型，也可以定义对象类型，同时支持级联赋值
		6.2）@RequestParam注解
			6.2.1）属性：
				a）value：指定要获取的参数名
				b）required：指定这个参数是否是必须的，默认为true，如果没有这个参数直接抛异常。设置为false则获取不到的话不抛异常。
				c）defaultValue：设置参数的默认值，如果没有获取到参数，则取该默认值，如果不设置默认值为null（前提required=false）
		6.3）@RequestHeader注解
			获取请求头中参数用法同上
		6.4）@CookieValue注解
			获取Cookie中参数用法同上
		6.5）参数乱码问题的解决
			6.5.1）请求乱码：
				a）GET请求：改server.xml配置，在8080端口处选择参数URIEncoding=UTF-8
				b）POST请求：在第一次获取参数之前设置requset.setCharacterEncoding("UTF-8");
					（SpringMVC提供了CharacterEncodingFilter过滤器，且务必配置在其他所有filter之前）
			6.5.2）响应乱码：
				response.setContentType("text/html;charset=utf-8");
	7、SpringMVC响应参数返回到界面
		7.1）可以在方法处传入Map、Model或者ModelMap，给这些对象中保存的参数都保存在请求域中，可以被界面获取。
		7.2）方法的返回值可以是ModelAndView类型，既包含视图信息（页面地址），也包含模型数据（传递给页面的参数，包含在请求域中）
		7.3）@SessionAttributes注解
			a）value：需要放入的属性key
			b）type：需要放入的属性类类型
			c）如果两个属性都赋值，则取二者的并集
		7.4）@ModelAttribute注解：可以自己定义对象接收页面参数,而不是SpringMVC新new对象。（可以实现字段的局部更新，但是整合mybaits框架之后，该注解基本无作用，了解即可）
	8、SpringMVC的请求流程
		8.1）前端控制器（DispatcherServlet）处理步骤
			8.1.1）所有请求过来被DispatcherServlet拦截；
			8.2.2）调用doDispatch()方法进行处理；
				a）getHandler()：根据当前请求地址在handlerMapping中找到能够处理这个请求的目标处理器类（执行链）
				b）getHandlerAdapter()：根据当前处理器类获取到能够执行这个处理器方法的适配器（handlerAdapter）
				c）使用刚才获取到的适配器执行目标方法
				d）目标方法执行后返回一个ModelAndView对象
				e）根据ModelAndView对象的信息转发到具体的页面，并可以在请求域中取出ModelAndView对象中的模型数据
			8.2.3）getHandler()细节
				a）handlerMappings保存了所有的handlerMapping（资源部）
				b）循环查找以上所有的handlerMapping是否包含request中的url处理器，如果有则返回组装后的HandlerExecutionChain（Handler执行链）
			8.2.4）getHandlerAdapter()细节
				a）同上
		8.2）前端控制器（DispatcherServlet）九大引用属性（SpringMVC的九大组件，均为接口（规范），提供了强大的扩展性）
			8.2.1）HandlerMapping：是用来查找Handler的。在SpringMVC中会有很多请求，每个请求都需要一个Handler处理，具体接收到一个请求之后使用哪个Handler进行处理呢？这就是HandlerMapping需要做的事。
			8.2.2）HandlerAdapter：从名字上看，它就是一个适配器。因为SpringMVC中的Handler可以是任意的形式，只要能处理请求就ok，但是Servlet需要的处理方法的结构却是固定的，都是以request和response为参数的方法。如何让固定的Servlet处理方法调用灵活的Handler来进行处理呢？这就是HandlerAdapter要做的事情。
			8.2.3）HandlerExceptionResolver： 其它组件都是用来干活的。在干活的过程中难免会出现问题，出问题后怎么办呢？这就需要有一个专门的角色对异常情况进行处理，在SpringMVC中就是HandlerExceptionResolver。具体来说，此组件的作用是根据异常设置ModelAndView，之后再交给render方法进行渲染
			8.2.4）ViewResolver：ViewResolver用来将String类型的视图名和Locale解析为View类型的视图。View是用来渲染页面的，也就是将程序返回的参数填入模板里，生成html（也可能是其它类型）文件。这里就有两个关键问题：使用哪个模板？用什么技术（规则）填入参数？这其实是ViewResolver主要要做的工作，ViewResolver需要找到渲染所用的模板和所用的技术（也就是视图的类型）进行渲染，具体的渲染过程则交由不同的视图自己完成。
			8.2.5）RequestToViewNameTranslator：ViewName是根据ViewName查找View，但有的Handler处理完后并没有设置View也没有设置ViewName，这时就需要从request获取ViewName了，如何从request中获取ViewName就是RequestToViewNameTranslator要做的事情了。RequestToViewNameTranslator在Spring MVC容器里只可以配置一个，所以所有request到ViewName的转换规则都要在一个Translator里面全部实现
			8.2.6）LocaleResolver：解析视图需要两个参数：一是视图名，另一个是Locale。视图名是处理器返回的，Locale是从哪里来的？这就是LocaleResolver要做的事情。LocaleResolver用于从request解析出Locale，Locale就是zh-cn之类，表示一个区域，有了这个就可以对不同区域的用户显示不同的结果。SpringMVC主要有两个地方用到了Locale：一是ViewResolver视图解析的时候；二是用到国际化资源或者主题的时候
			8.2.7）ThemeResolver：用于解析主题。SpringMVC中一个主题对应一个properties文件，里面存放着跟当前主题相关的所有资源、如图片、css样式等。SpringMVC的主题也支持国际化，同一个主题不同区域也可以显示不同的风格。SpringMVC中跟主题相关的类有 ThemeResolver、ThemeSource和Theme。主题是通过一系列资源来具体体现的，要得到一个主题的资源，首先要得到资源的名称，这是ThemeResolver的工作。然后通过主题名称找到对应的主题（可以理解为一个配置）文件，这是ThemeSource的工作。最后从主题中获取资源就可以了
			8.2.8）MultipartResolver：用于处理上传请求。处理方法是将普通的request包装成MultipartHttpServletRequest，后者可以直接调用getFile方法获取File，如果上传多个文件，还可以调用getFileMap得到FileName->File结构的Map。此组件中一共有三个方法，作用分别是判断是不是上传请求，将request包装成MultipartHttpServletRequest、处理完后清理上传过程中产生的临时资源
			8.2.9）FlashMapManager： 用来管理FlashMap的，FlashMap主要用在redirect中传递参数
			注：Handler的可以理解为处理器。它直接应对着MVC中的C也就是Controller层，它的具体表现形式有很多，可以是类，也可以是方法。在Controller层中@RequestMapping标注的所有方法都可以看成是一个Handler，只要可以实际处理请求就可以是Handler。Handler是用来干活的工具；HandlerMapping用于根据需要干的活找到相应的工具；HandlerAdapter是使用工具干活的人。
		8.3）SpringMVC的九大组件初始化
			8.3.1）DispatcherServlet中的onRefresh方法中的initStrategies方法，里面初始化了九大组件（方法调用是在服务器启动的完成）
			8.3.2）组件初始化均是去容器中找这个组件，如果找不到则取默认配置的组件（MultipartResolver除外，找不到默认为null）
	9、SpringMVC视图解析器
		9.1）SpringMVC视图解析步骤
		a）方法的任何返回值都会被封装成ModelAndView对象
			mv = ha.handle(processedRequest, response, mappedHandler.getHandler());
		b）来到页面的方法（视图渲染流程）
			processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);
		c）调用render方法进行渲染
			render(mv, request, response);
		d）调用resolveViewName根据视图名获取View对象
			view = resolveViewName(mv.getViewName(), mv.getModelInternal(), locale, request);
			View view = viewResolver.resolveViewName(viewName, locale);
			view = createView(viewName, locale);
		e）调用View对象的render方法
			view.render(mv.getModelInternal(), request, response);
		f）渲染数据到页面
			renderMergedOutputModel(mergedModel, getRequestToExpose(request), response);
		g）将模型中的数据组装到request中
			exposeModelAsRequestAttributes(model, request);
		h）获取转发地址
			String dispatcherPath = prepareForRendering(request, response);
		i）获取转发器
			RequestDispatcher rd = getRequestDispatcher(request, dispatcherPath);
		j）转发操作，完成视图渲染，流程结束
			rd.forward(request, response);
			注：视图的作用是渲染模型数据，将模型里的数据以某种形式呈现给客户，视图由视图解析器负责实例化，由于视图是无状态的，所以不会有线程安全问题。
		9.2）自定义视图解析器步骤
			a）编写自定义的视图解析器和视图实现类
			b）将视图解析器加入到IOC容器中去		
	10、数据转换&数据格式化&数据校验
		10.1）数据转换
			1）WebDataBinder：数据绑定器，负责数据的绑定工作
				a）conversionService：负责数据类型的转换以及格式化功能
				b）validators：负责数据校验功能
				c）bindingResult：负责保存及解析数据绑定期间数据校验产生的错误
			2）自定义数据转换器
				a）实现Converter接口
				b）配置自己的ConversionService，让SpringMVC使用自己定义的ConversionService
			3）几个注解详解
				3.1）context:annotation-config：激活已经在application context中注册的bean
					a）如果你想使用@Autowired注解，那么就必须事先在 Spring 容器中声明 AutowiredAnnotationBeanPostProcessor Bean；如果想使用@Resource 、@PostConstruct、@PreDestroy等注解就必须声明CommonAnnotationBeanPostProcessor；如果想使用@PersistenceContext注解，就必须声明PersistenceAnnotationBeanPostProcessor的Bean；如果想使用 @Required的注解，就必须声明RequiredAnnotationBeanPostProcessor的Bean。<context:annotation-config/>隐式地向 Spring容器注册这4个BeanPostProcessor：
				3.2）context:component-scan：
					a）<context:component-scan>做了<context:annotation-config>要做的事情，还额外支持@Component，@Repository，@Service，@Controller @RestController,@ControllerAdvice, and @Configuration注解；
					b）<context:component-scan>该注解可以扫描并注册你使用注解诸如@controller @service @component..的bean，也就是说你不用xml中显示配置，需要的时候尽管用@Resource或者@Autowired来自动注入
					c）所以配置<context:component-scan>就不需要配置<context:annotation- config/>
				3.3）mvc:annotation-driven：
					a）向工厂中注册了以下组件
						RequestMappingHandlerMapping：处理@RequestMapping注解
						BeanNameUrlHandlerMapping：将controller类的名字映射为请求url
						RequestMappingHandlerAdapter：处理@Controller注解的处理器，支持自定义方法参数和返回值
						HttpRequestHandlerAdapter：处理继承HttpRequestHandler的处理器
						SimpleControllerHandlerAdapter：处理继承自Controller接口的处理器
						ExceptionHandlerExceptionResolver：处理异常的解析器
						ResponseStatusExceptionResolver：处理异常的解析器
						DefaultHandlerExceptionResolver：处理异常的解析器
					b）支持使用ConversionService实例对表单参数进行类型转换；
					c）支持使用@NumberFormatannotation、@DateTimeFormat注解完成数据类型的格式化；
					d）支持使用@Valid注解对Java bean实例进行JSR 303验证；
					e）支持使用@RequestBody和@ResponseBody注解
		10.2）数据格式化
			

				
				
		
			
	